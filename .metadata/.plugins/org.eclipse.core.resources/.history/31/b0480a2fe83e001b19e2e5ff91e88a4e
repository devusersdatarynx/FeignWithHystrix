package com.datarynx.feign.hystrix.api.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.datarynx.feign.hystrix.api.dto.User;
import com.datarynx.feign.hystrix.api.service.UserService;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@RestController
@RequestMapping("/userdetails")
public class UserController {

	private Logger logger = LoggerFactory.getLogger(UserController.class);

	@Autowired
	private UserService userService;

	@GetMapping("user/{id}")
	@HystrixCommand(fallbackMethod = "defaultResponse")
	public ResponseEntity<Object> user(@PathVariable("id") String id) {
		logger.info("calling userList() to get list of users based on ID");
		User usr = userService.getUser(id);
		return new ResponseEntity<Object>(usr, HttpStatus.OK);
		// return userService.getUser(id);
	}

	@GetMapping("/userList")
	@HystrixCommand(fallbackMethod = "defaultResponse")
	public ResponseEntity<Object> userList() {
		logger.info("calling userList() to get list of users");

		List<User> usrs = userService.getUserList();
		return new ResponseEntity<Object>(usrs, HttpStatus.OK);
	}

	@PostMapping("/user")
	@HystrixCommand(fallbackMethod = "defaultResponse")
	public String addUser(@RequestBody User user) {
		logger.info("adding user");
		return userService.addUser(user);
	}

	@DeleteMapping("/user/{id}")
	@HystrixCommand(fallbackMethod = "defaultResponse")
	String deleteUser(@PathVariable String id) {
		logger.info("deleting user - {}", id);
		return userService.deleteUser(id);
	}

	@PutMapping("/updateAddress/{id}/{newAddress}")
	@HystrixCommand(fallbackMethod = "defaultResponse")
	String updateAddress(@PathVariable String id, @RequestBody User user) {
		logger.info("updating user - {}", id);
		return userService.updateAddress(id, user);
	}

	// When we define a fallback-method, the fallback-method must match the same
	// parameters of the method where you define the Hystrix Command using the
	// hystrix-command annotation.
	public ResponseEntity<Object> defaultResponse(String err) {
		System.out.println("You are seeing this fallback response because the underlying microservice is down.");
		err = "Fallback error as the microservice is down.";
		return new ResponseEntity<Object>(err, HttpStatus.INTERNAL_SERVER_ERROR);
	}

}
